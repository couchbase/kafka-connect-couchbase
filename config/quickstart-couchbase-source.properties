# Arbitrary unique name for the connector. Attempting to register
# two connectors with the same name will fail.
name=test-couchbase-source

# The Java class for the connector.
connector.class=com.couchbase.connect.kafka.CouchbaseSourceConnector

# The maximum number of tasks that should be created for this connector.
tasks.max=2

# Publish to this Kafka topic.
topic.name=test-default

# Connect to this Couchbase cluster (comma-separated list of bootstrap nodes).
connection.cluster_address=127.0.0.1
connection.timeout.ms=2000

# Optionally connect to Couchbase Server over a secure channel.
# If the KAFKA_COUCHBASE_SSL_KEYSTORE_PASSWORD environment variable is set,
# it will override the password specified here.
#   connection.ssl.enabled=true
#   connection.ssl.keystore.location=/tmp/keystore
#   connection.ssl.keystore.password=secret

# Read from this Couchbase bucket using these credentials.
# If the KAFKA_COUCHBASE_PASSWORD environment variable is set,
# it will override the password specified here.
connection.bucket=default
connection.username=default
connection.password=secret

# Optionally wait until an entire snapshot is received from Couchbase
# before publishing to Kafka (committing the offsets).
#
# Setting this to true tells the connector task to accumulate events
# in local memory until the whole snapshot is received.
#
# Setting this to false tells the connector task to send each event
# to the Kafka topic immediately.
use_snapshots=false

# Transform a Couchbase document change notification into a Kafka message
# using this Java class, which should extend com.couchbase.connect.kafka.handler.source.SourceHandler.
# Legacy handlers implementing com.couchbase.connect.kafka.converter.Converter will also work.
dcp.message.converter.class=com.couchbase.connect.kafka.handler.source.DefaultSchemaSourceHandler

# Control which Couchbase document change notifications get published to Kafka
# using this Java class, which must implement com.couchbase.connect.kafka.filter.Filter.
event.filter.class=com.couchbase.connect.kafka.filter.AllPassFilter

# Specifies when in Couchbase history the connector should start streaming from.
# Modes starting with "SAVED_OFFSET" tell the connector to resume from when each
# vBucket's state was most recently saved by the Kafka Connect framework, falling back
# to the secondary mode if no saved state exists for a vBucket.
couchbase.stream_from=SAVED_OFFSET_OR_BEGINNING
#couchbase.stream_from=SAVED_OFFSET_OR_NOW
#couchbase.stream_from=BEGINNING
#couchbase.stream_from=NOW

# To reduce bandwidth usage, Couchbase Server 4.5 and later can send documents to the connector in compressed form.
# (Messages are always published to the Kafka topic in uncompressed form, regardless of this setting.)
#   DISABLED - No compression.
#   ENABLED - Couchbase Server decides whether to use compression on a per-document basis. For Couchbase 5.5 and later,
#             the document will be sent compressed if the server already has easy access to the compressed form.
#             For older server versions, this mode is equivalent to FORCED, and may increase server CPU load.
#   FORCED - Compression is used for every document, unless compressed size is greater than uncompressed size.
couchbase.compression=DISABLED
#couchbase.compression=ENABLED
#couchbase.compression=FORCED
